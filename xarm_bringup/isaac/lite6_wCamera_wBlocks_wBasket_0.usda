#usda 1.0
(
    customLayerData = {
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (5, 0, 0)
                double radius = 5
            }
            dictionary Perspective = {
                double3 position = (0.9137711496517782, 0.16340972343119003, 1.0515098506086362)
                double3 target = (-3.5254310915727163, -2.496608970890579, -4.393951242834975)
            }
            dictionary Right = {
                double3 position = (0, -5, 0)
                double radius = 5
            }
            dictionary Top = {
                double3 position = (0, 0, 5)
                double radius = 5
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        dictionary metricsAssembler = {
            dictionary "/World/Jungle_Flame" = {
            }
            int version = 1
        }
        dictionary omni_layer = {
            string authoring_layer = "./lite6_wCamera_wBlocks_wBasket.usda"
            dictionary locked = {
            }
            dictionary muteness = {
            }
        }
        dictionary renderSettings = {
            float3 "rtx:debugView:pixelDebug:textColor" = (0, 1e18, 0)
            float3 "rtx:fog:fogColor" = (0.75, 0.75, 0.75)
            float3 "rtx:index:backgroundColor" = (0, 0, 0)
            float3 "rtx:index:regionOfInterestMax" = (0, 0, 0)
            float3 "rtx:index:regionOfInterestMin" = (0, 0, 0)
            float3 "rtx:post:backgroundZeroAlpha:backgroundDefaultColor" = (0, 0, 0)
            float3 "rtx:post:colorcorr:contrast" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gain" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gamma" = (1, 1, 1)
            float3 "rtx:post:colorcorr:offset" = (0, 0, 0)
            float3 "rtx:post:colorcorr:saturation" = (1, 1, 1)
            float3 "rtx:post:colorgrad:blackpoint" = (0, 0, 0)
            float3 "rtx:post:colorgrad:contrast" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gain" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gamma" = (1, 1, 1)
            float3 "rtx:post:colorgrad:lift" = (0, 0, 0)
            float3 "rtx:post:colorgrad:multiply" = (1, 1, 1)
            float3 "rtx:post:colorgrad:offset" = (0, 0, 0)
            float3 "rtx:post:colorgrad:whitepoint" = (1, 1, 1)
            float3 "rtx:post:lensDistortion:lensFocalLengthArray" = (10, 30, 50)
            float3 "rtx:post:lensFlares:anisoFlareFalloffX" = (450, 475, 500)
            float3 "rtx:post:lensFlares:anisoFlareFalloffY" = (10, 10, 10)
            float3 "rtx:post:lensFlares:cutoffPoint" = (2, 2, 2)
            float3 "rtx:post:lensFlares:haloFlareFalloff" = (10, 10, 10)
            float3 "rtx:post:lensFlares:haloFlareRadius" = (75, 75, 75)
            float3 "rtx:post:lensFlares:isotropicFlareFalloff" = (50, 50, 50)
            float3 "rtx:post:lensFlares:spectralBlurWavelengthRange" = (380, 550, 770)
            float3 "rtx:post:tonemap:whitepoint" = (1, 1, 1)
            float3 "rtx:raytracing:indexdirect:svoBrickSize" = (32, 32, 32)
            float3 "rtx:raytracing:inscattering:singleScatteringAlbedo" = (0.9, 0.9, 0.9)
            float3 "rtx:raytracing:inscattering:transmittanceColor" = (0.5, 0.5, 0.5)
            float3 "rtx:sceneDb:ambientLightColor" = (0.1, 0.1, 0.1)
            float2 "rtx:viewTile:resolution" = (0, 0)
        }
    }
    defaultPrim = "World"
    endTimeCode = 1000000
    metersPerUnit = 1
    startTimeCode = 0
    timeCodesPerSecond = 60
    upAxis = "Z"
)

def Xform "Environment"
{
    quatd xformOp:orient = (1, 0, 0, 0)
    double3 xformOp:scale = (1, 1, 1)
    double3 xformOp:translate = (0, 0, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

    def DistantLight "defaultLight" (
        prepend apiSchemas = ["ShapingAPI"]
    )
    {
        float inputs:angle = 1
        float inputs:intensity = 3000
        float inputs:shaping:cone:angle = 180
        float inputs:shaping:cone:softness
        float inputs:shaping:focus
        color3f inputs:shaping:focusTint
        asset inputs:shaping:ies:file
        quatd xformOp:orient = (0.6532814824381883, 0.2705980500730985, 0.27059805007309845, 0.6532814824381882)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def Xform "GroundPlane"
    {
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Mesh "CollisionMesh"
        {
            uniform bool doubleSided = 0
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [0, 1, 2, 3]
            normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)]
            point3f[] points = [(-25, -25, 0), (25, -25, 0), (25, 25, 0), (-25, 25, 0)]
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            texCoord2f[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1)] (
                interpolation = "varying"
            )
        }

        def Plane "CollisionPlane" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            uniform token axis = "Z"
            uniform token purpose = "guide"
        }
    }
}

def Xform "World"
{
    def "lite6" (
        prepend references = @./lite6.usd@
    )
    {
        over "base_link" (
            prepend apiSchemas = ["PhysicsArticulationRootAPI", "PhysxArticulationAPI"]
        )
        {
            def PhysicsFixedJoint "FixedJoint"
            {
                rel physics:body1 = </World/lite6/base_link>
                float physics:breakForce = inf
                float physics:breakTorque = inf
                point3f physics:localPos0 = (0, 0, 0)
                point3f physics:localPos1 = (0, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }

            over "joint1"
            {
                float state:angular:physics:position = 0
                float state:angular:physics:velocity = 0
            }
        }

        over "link_base"
        {
            over "joint1"
            {
                float state:angular:physics:position = 0
                float state:angular:physics:velocity = 0
            }
        }

        over "link1"
        {
            over "joint2"
            {
                float state:angular:physics:position = 0
                float state:angular:physics:velocity = 0
            }
        }

        over "link2"
        {
            over "joint3"
            {
                float state:angular:physics:position = 0
                float state:angular:physics:velocity = 0
            }
        }

        over "link3"
        {
            over "joint4"
            {
                float state:angular:physics:position = 0
                float state:angular:physics:velocity = 0
            }
        }

        over "link4"
        {
            over "joint5"
            {
                float state:angular:physics:position = 0
                float state:angular:physics:velocity = 0
            }
        }

        over "link5"
        {
            over "joint6"
            {
                float state:angular:physics:position = 0
                float state:angular:physics:velocity = 0
            }
        }

        over "link6"
        {
            def Camera "Camera" (
                instanceable = false
            )
            {
                float2 clippingRange = (0.01, 10000000)
                float focalLength = 18.147562
                float focusDistance = 400
                float horizontalAperture = 20
                float verticalAperture = 15
                quatd xformOp:orient = (6.123233995736766e-17, -0.7071067811865476, -0.7071067811865475, -4.329780281177466e-17)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0.04, -0.035, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }

            over "gripper_left_joint"
            {
                float state:linear:physics:position = 0
                float state:linear:physics:velocity = 0
            }

            over "gripper_right_joint"
            {
                float state:linear:physics:position = 0
                float state:linear:physics:velocity = 0
            }
        }

        over "gripper_base_link"
        {
            over "gripper_left_joint"
            {
                float state:linear:physics:position = 0
                float state:linear:physics:velocity = 0
            }

            over "gripper_right_joint"
            {
                float state:linear:physics:position = 0
                float state:linear:physics:velocity = 0
            }
        }

        over "left_finger"
        {
        }

        over "right_finger"
        {
        }
    }

    def OmniGraph "ros2_graph"
    {
        token evaluationMode = "Automatic"
        token evaluator:type = "execution"
        token fabricCacheBacking = "Shared"
        int2 fileFormatVersion = (1, 9)
        token pipelineStage = "pipelineStageSimulation"

        def OmniGraphNode "on_playback_tick" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            token node:type = "omni.graph.action.OnPlaybackTick"
            int node:typeVersion = 2
            custom double outputs:deltaSeconds
            custom double outputs:frame
            custom uint outputs:tick (
                customData = {
                    bool isExecution = 1
                }
            )
            custom double outputs:time
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (-60.95239, 128.04483)
        }

        def OmniGraphNode "articulation_controller" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom double[] inputs:effortCommand
            prepend double[] inputs:effortCommand.connect = </World/ros2_graph/ros2_subscribe_joint_state.outputs:effortCommand>
            custom uint inputs:execIn (
                customData = {
                    bool isExecution = 1
                }
            )
            prepend uint inputs:execIn.connect = </World/ros2_graph/ros2_subscribe_joint_state.outputs:execOut>
            custom int[] inputs:jointIndices
            custom token[] inputs:jointNames
            prepend token[] inputs:jointNames.connect = </World/ros2_graph/ros2_subscribe_joint_state.outputs:jointNames>
            custom double[] inputs:positionCommand
            prepend double[] inputs:positionCommand.connect = </World/ros2_graph/ros2_subscribe_joint_state.outputs:positionCommand>
            custom string inputs:robotPath
            custom rel inputs:targetPrim = </World/lite6> (
                customData = {
                    dictionary omni = {
                        dictionary graph = {
                            string relType = "target"
                        }
                    }
                }
            )
            custom double[] inputs:velocityCommand
            prepend double[] inputs:velocityCommand.connect = </World/ros2_graph/ros2_subscribe_joint_state.outputs:velocityCommand>
            token node:type = "isaacsim.core.nodes.IsaacArticulationController"
            int node:typeVersion = 1
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (640.95325, 205.32089)
        }

        def OmniGraphNode "ros2_publish_joint_state" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom uint64 inputs:context
            custom uint inputs:execIn (
                customData = {
                    bool isExecution = 1
                }
            )
            prepend uint inputs:execIn.connect = </World/ros2_graph/on_playback_tick.outputs:tick>
            custom string inputs:nodeNamespace
            custom string inputs:qosProfile
            custom uint64 inputs:queueSize
            custom rel inputs:targetPrim = </World/lite6/base_link> (
                customData = {
                    dictionary omni = {
                        dictionary graph = {
                            string relType = "target"
                        }
                    }
                }
            )
            custom double inputs:timeStamp
            prepend double inputs:timeStamp.connect = </World/ros2_graph/isaac_read_system_time.outputs:systemTime>
            custom string inputs:topicName = "/isaac/joint_states"
            token node:type = "isaacsim.ros2.bridge.ROS2PublishJointState"
            int node:typeVersion = 1
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (280.16632, -72.45023)
        }

        def OmniGraphNode "ros2_subscribe_joint_state" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom uint64 inputs:context
            custom uint inputs:execIn (
                customData = {
                    bool isExecution = 1
                }
            )
            prepend uint inputs:execIn.connect = </World/ros2_graph/on_playback_tick.outputs:tick>
            custom string inputs:nodeNamespace
            custom string inputs:qosProfile
            custom uint64 inputs:queueSize
            custom string inputs:topicName = "/isaac/joint_command"
            token node:type = "isaacsim.ros2.bridge.ROS2SubscribeJointState"
            int node:typeVersion = 2
            custom double[] outputs:effortCommand
            custom uint outputs:execOut (
                customData = {
                    bool isExecution = 1
                }
            )
            custom token[] outputs:jointNames
            custom double[] outputs:positionCommand
            custom double outputs:timeStamp
            custom double[] outputs:velocityCommand
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (265, 201)
        }

        def OmniGraphNode "isaac_read_system_time" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom int64 inputs:swhFrameNumber
            token node:type = "isaacsim.core.nodes.IsaacReadSystemTime"
            int node:typeVersion = 1
            custom double outputs:systemTime
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (-123.24664, -1.8499843)
        }

        def OmniGraphNode "isaac_create_render_product" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom rel inputs:cameraPrim = </World/lite6/link6/Camera> (
                customData = {
                    dictionary omni = {
                        dictionary graph = {
                            string relType = "target"
                        }
                    }
                }
            )
            custom bool inputs:enabled
            custom uint inputs:execIn (
                customData = {
                    bool isExecution = 1
                }
            )
            prepend uint inputs:execIn.connect = </World/ros2_graph/on_playback_tick.outputs:tick>
            custom uint inputs:height
            custom uint inputs:width
            token node:type = "isaacsim.core.nodes.IsaacCreateRenderProduct"
            int node:typeVersion = 2
            custom uint outputs:execOut (
                customData = {
                    bool isExecution = 1
                }
            )
            custom token outputs:renderProductPath
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (241.52132, 555.1075)
        }

        def OmniGraphNode "ros2_camera_helper" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom uint64 inputs:context
            custom bool inputs:enabled
            custom bool inputs:enableSemanticLabels
            custom uint inputs:execIn (
                customData = {
                    bool isExecution = 1
                }
            )
            prepend uint inputs:execIn.connect = </World/ros2_graph/isaac_create_render_product.outputs:execOut>
            custom string inputs:frameId
            custom uint inputs:frameSkipCount
            custom string inputs:nodeNamespace
            custom string inputs:qosProfile
            custom uint64 inputs:queueSize
            custom token inputs:renderProductPath
            prepend token inputs:renderProductPath.connect = </World/ros2_graph/isaac_create_render_product.outputs:renderProductPath>
            custom bool inputs:resetSimulationTimeOnStop
            custom string inputs:semanticLabelsTopicName
            custom float2 inputs:stereoOffset
            custom string inputs:topicName
            custom token inputs:type (
                allowedTokens = ["rgb", "depth", "depth_pcl", "instance_segmentation", "semantic_segmentation", "bbox_2d_tight", "bbox_2d_loose", "bbox_3d", "camera_info"]
            )
            custom bool inputs:useSystemTime
            custom token inputs:viewport
            token node:type = "isaacsim.ros2.bridge.ROS2CameraHelper"
            int node:typeVersion = 2
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (591.9077, 467.51096)
        }
    }

    def OmniGraph "ros2_position_respawn"
    {
        token evaluationMode = "Automatic"
        token evaluator:type = "execution"
        token fabricCacheBacking = "Shared"
        int2 fileFormatVersion = (1, 9)
        token pipelineStage = "pipelineStageSimulation"

        def OmniGraphNode "isaac_read_system_time" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom int64 inputs:swhFrameNumber
            token node:type = "isaacsim.core.nodes.IsaacReadSystemTime"
            int node:typeVersion = 1
            custom double outputs:systemTime
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (-432.43164, 155.92181)
        }

        def OmniGraphNode "on_playback_tick" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            token node:type = "omni.graph.action.OnPlaybackTick"
            int node:typeVersion = 2
            custom double outputs:deltaSeconds
            custom double outputs:frame
            custom uint outputs:tick (
                customData = {
                    bool isExecution = 1
                }
            )
            custom double outputs:time
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (-363.16586, -41.380707)
        }

        def OmniGraphNode "ros2_subscribe_twist" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom uint64 inputs:context
            custom uint inputs:execIn (
                customData = {
                    bool isExecution = 1
                }
            )
            prepend uint inputs:execIn.connect = </World/ros2_position_respawn/on_playback_tick.outputs:tick>
            custom string inputs:nodeNamespace
            custom string inputs:qosProfile
            custom uint64 inputs:queueSize
            custom string inputs:topicName
            token node:type = "isaacsim.ros2.bridge.ROS2SubscribeTwist"
            int node:typeVersion = 1
            custom vector3d outputs:angularVelocity
            custom uint outputs:execOut (
                customData = {
                    bool isExecution = 1
                }
            )
            custom vector3d outputs:linearVelocity
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (26.191786, -106.44856)
        }

        def OmniGraphNode "ros2_publish_transform_tree" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom uint64 inputs:context
            custom uint inputs:execIn (
                customData = {
                    bool isExecution = 1
                }
            )
            prepend uint inputs:execIn.connect = </World/ros2_position_respawn/on_playback_tick.outputs:tick>
            custom string inputs:nodeNamespace
            custom rel inputs:parentPrim = </World/lite6/base_link> (
                customData = {
                    dictionary omni = {
                        dictionary graph = {
                            string relType = "target"
                        }
                    }
                }
            )
            custom string inputs:qosProfile
            custom uint64 inputs:queueSize
            custom bool inputs:staticPublisher
            custom rel inputs:targetPrims = </World/red_block> (
                customData = {
                    dictionary omni = {
                        dictionary graph = {
                            string relType = "target"
                        }
                    }
                }
            )
            custom double inputs:timeStamp
            prepend double inputs:timeStamp.connect = </World/ros2_position_respawn/isaac_read_system_time.outputs:systemTime>
            custom string inputs:topicName
            token node:type = "isaacsim.ros2.bridge.ROS2PublishTransformTree"
            int node:typeVersion = 1
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (37.73608, 164.31769)
        }

        def OmniGraphNode "ros2_publish_raw_transform_tree" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom string inputs:childFrameId
            custom uint64 inputs:context
            custom uint inputs:execIn (
                customData = {
                    bool isExecution = 1
                }
            )
            prepend uint inputs:execIn.connect = </World/ros2_position_respawn/on_playback_tick.outputs:tick>
            custom string inputs:nodeNamespace
            custom string inputs:parentFrameId
            custom string inputs:qosProfile
            custom uint64 inputs:queueSize
            custom quatd inputs:rotation
            custom bool inputs:staticPublisher
            custom double inputs:timeStamp
            prepend double inputs:timeStamp.connect = </World/ros2_position_respawn/isaac_read_system_time.outputs:systemTime>
            custom string inputs:topicName
            custom vector3d inputs:translation
            token node:type = "isaacsim.ros2.bridge.ROS2PublishRawTransformTree"
            int node:typeVersion = 1
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (37.73608, 491.7559)
        }

        def OmniGraphNode "script_node" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom uint inputs:execIn (
                customData = {
                    bool isExecution = 1
                }
            )
            prepend uint inputs:execIn.connect = </World/ros2_position_respawn/ros2_subscribe_twist.outputs:execOut>
            custom string inputs:script
            custom token inputs:scriptPath
            custom bool inputs:usePath
            token node:type = "omni.graph.scriptnode.ScriptNode"
            int node:typeVersion = 2
            custom uint outputs:execOut (
                customData = {
                    bool isExecution = 1
                }
            )
            custom bool state:omni_initialized
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (447.03387, -28.786934)
        }
    }

    def "blue_block" (
        prepend payload = @./blue_block.usd@
    )
    {
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0.17116373984936645, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def "small_KLT" (
        prepend payload = @./small_KLT.usd@
    )
    {
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0.13478581006379797, -0.3157989711290796, 0.09225287502537216)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def "yellow_block" (
        prepend payload = @./yellow_block.usd@
    )
    {
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0.22482059362457138, 0.07249492132136469, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def "red_block" (
        prepend payload = @./red_block.usd@
    )
    {
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0.2736967617920322, -0.09213969710562792, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }
}

over "Render" (
    hide_in_stage_window = true
)
{
    over "OmniverseKit"
    {
        over "HydraTextures"
        {
            over "Replicator"
            {
                over "PostRender"
                {
                    over "SDGPipeline"
                    {
                        custom uint64 graph:variable:__computeParams (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__computeParams"
                        )
                        custom uint64 graph:variable:__cudaInteropState (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__cudaInteropState"
                        )
                        custom uint64 graph:variable:__cudaStream (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__cudaStream"
                        )
                        custom uint64 graph:variable:__rpInteropState (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__rpInteropState"
                        )
                    }
                }
            }

            over "Replicator_01"
            {
                over "PostRender"
                {
                }
            }

            over "Replicator_02"
            {
                over "PostRender"
                {
                    over "SDGPipeline"
                    {
                        custom uint64 graph:variable:__computeParams (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__computeParams"
                        )
                        custom uint64 graph:variable:__cudaInteropState (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__cudaInteropState"
                        )
                        custom uint64 graph:variable:__cudaStream (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__cudaStream"
                        )
                        custom uint64 graph:variable:__rpInteropState (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__rpInteropState"
                        )
                    }
                }
            }

            over "Replicator_03"
            {
                over "PostRender"
                {
                    over "SDGPipeline"
                    {
                        custom uint64 graph:variable:__computeParams (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__computeParams"
                        )
                        custom uint64 graph:variable:__cudaInteropState (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__cudaInteropState"
                        )
                        custom uint64 graph:variable:__cudaStream (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__cudaStream"
                        )
                        custom uint64 graph:variable:__rpInteropState (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__rpInteropState"
                        )
                    }
                }
            }

            over "Replicator_04"
            {
                over "PostRender"
                {
                    over "SDGPipeline"
                    {
                        custom uint64 graph:variable:__computeParams (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__computeParams"
                        )
                        custom uint64 graph:variable:__cudaInteropState (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__cudaInteropState"
                        )
                        custom uint64 graph:variable:__cudaStream (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__cudaStream"
                        )
                        custom uint64 graph:variable:__rpInteropState (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__rpInteropState"
                        )
                    }
                }
            }

            over "Replicator_05"
            {
                over "PostRender"
                {
                    over "SDGPipeline"
                    {
                        custom uint64 graph:variable:__computeParams (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__computeParams"
                        )
                        custom uint64 graph:variable:__cudaInteropState (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__cudaInteropState"
                        )
                        custom uint64 graph:variable:__cudaStream (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__cudaStream"
                        )
                        custom uint64 graph:variable:__rpInteropState (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__rpInteropState"
                        )
                    }
                }
            }

            over "Replicator_06"
            {
                over "PostRender"
                {
                    over "SDGPipeline"
                    {
                        custom uint64 graph:variable:__computeParams (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__computeParams"
                        )
                        custom uint64 graph:variable:__cudaInteropState (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__cudaInteropState"
                        )
                        custom uint64 graph:variable:__cudaStream (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__cudaStream"
                        )
                        custom uint64 graph:variable:__rpInteropState (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__rpInteropState"
                        )
                    }
                }
            }
        }
    }
}

