#! /usr/bin/env python3

import rclpy
from rclpy.node import Node
from geometry_msgs.msg import PoseStamped
from sensor_msgs.msg import Image
from cv_bridge import CvBridge, CvBridgeError
import transforms3d as t3d
from std_msgs.msg import Int32
from ros2_numpy_tf import ros2numpy
from datetime import datetime
import numpy as np
import cv2
import os
import argparse

def get_actions_for_phase(observations):
    if len(observations) < 2:
        return []
    
    goal_pose_msg = observations[-1]
    goal_pose = ros2numpy(goal_pose_msg.pose)

    actions = []
    for observation_msg in observations:
        current_pose = ros2numpy(observation_msg.pose)
        action = np.linalg.inv(current_pose) @ goal_pose
        
        translation = action[:3, 3]
        rotation = t3d.euler.mat2euler(action[:3, :3])
        pose = np.concatenate((translation, rotation))
        action_str = '[{}]'.format(', '.join(map(str, pose))) + '\n'
        actions.append(action_str)
        
    return actions

class SaveTeleoperationData(Node):
    def __init__(self, data_dir):
        super().__init__('save_teleoperation_data')

        self.image_subscriber = self.create_subscription(Image, '/rgb', self.image_callback, 1)
        self.current_pose_subscriber = self.create_subscription(PoseStamped, '/current_pose', self.current_pose_callback, 1)
        self.start_episode_saving_subscriber = self.create_subscription(Int32, '/start_episode_saving', self.start_episode_saving_callback, 10)
        
        self.cv_bridge = CvBridge()
        self.image = None
        self.current_observation_pose = PoseStamped()
        self.observation_file = None
        self.action_filename = None
        self.images_folder = None
        self.images_counter = 0

        self.pick_observations = []
        self.place_observations = []
        self.is_in_pick_phase = True

        self.DATA_DIR = data_dir
        self.get_logger().info(f"Saving data to: {self.DATA_DIR}")

    def image_callback(self, msg):
        try:
            self.image = cv2.resize(self.cv_bridge.imgmsg_to_cv2(msg, "bgr8"), (224, 224))
        except CvBridgeError as e:
            print(e)

    def current_pose_callback(self, msg):
        self.current_observation_pose = msg

    def start_episode_saving_callback(self, msg):
        if msg.data == 2:
            self.save_episode_files(self.DATA_DIR)
            self.images_counter = 0
            self.pick_observations = []
            self.place_observations = []
            self.is_in_pick_phase = True
            self.get_logger().info('--------------------------------- New Episode Started ---------------------------------')

        elif msg.data == 1:
            if self.image is not None:
                self.save_current_frame()
                if self.is_in_pick_phase:
                    self.pick_observations.append(self.current_observation_pose)
                else:
                    self.place_observations.append(self.current_observation_pose)
            else:
                self.get_logger().warn("Skipping frame, image not received yet.")

        elif msg.data == 0:
            self.get_logger().info(f"Pick phase ended with {len(self.pick_observations)} frames. Switching to place phase.")
            self.is_in_pick_phase = False

        elif msg.data == -1:
            self.get_logger().info(f"Place phase ended with {len(self.place_observations)} frames. Finalizing episode.")
            
            pick_actions = get_actions_for_phase(self.pick_observations)
            place_actions = get_actions_for_phase(self.place_observations)
            
            self.action_filename.writelines(pick_actions)
            self.action_filename.writelines(place_actions)
            
            self.action_filename.close()
            self.observation_file.close()
            self.get_logger().info(f"Saved total {len(pick_actions) + len(place_actions)} actions for the episode.")

    def save_episode_files(self, dir_path):
        date = datetime.now()
        episode_name = date.strftime("%Y_%m_%d_%H_%M_%S")
        self.images_folder = os.path.join(dir_path, episode_name)
        observation_folder = os.path.join(dir_path, 'observations')
        action_folder = os.path.join(dir_path, 'actions')

        os.makedirs(self.images_folder, exist_ok=True)
        os.makedirs(observation_folder, exist_ok=True)
        os.makedirs(action_folder, exist_ok=True)

        observation_file_name = os.path.join(observation_folder, f'{episode_name}.txt')
        action_file_name = os.path.join(action_folder, f'{episode_name}.txt')

        self.observation_file = open(observation_file_name, "w")
        self.action_filename = open(action_file_name, "w")
        self.get_logger().info(f'Episode {episode_name} save files created...')

    def save_current_frame(self):
        if self.images_folder is None or self.observation_file is None: return
        
        pose = self.current_observation_pose.pose
        p, o = pose.position, pose.orientation
        quat = [o.w, o.x, o.y, o.z]
        euler = t3d.euler.quat2euler(quat)

        ### ★★★ 핵심 수정: 7번째 상태(phase_indicator) 추가 ★★★ ###
        phase_indicator = 0.0 if self.is_in_pick_phase else 1.0
        
        observation_str = f"[{p.x}, {p.y}, {p.z}, {euler[0]}, {euler[1]}, {euler[2]}, {phase_indicator}]\n"
        self.observation_file.write(observation_str)

        image_name = os.path.join(self.images_folder, f'{self.images_counter}.jpg')
        cv2.imwrite(image_name, self.image)
        self.images_counter += 1

def main(args=None):
    parser = argparse.ArgumentParser()
    parser.add_argument('--data_dir', type=str, default='DATA', help='Name of data directory.')
    args = parser.parse_args()
    rclpy.init(args=None)
    save_teleop_data_node = SaveTeleoperationData(args.data_dir)
    try:
        rclpy.spin(save_teleop_data_node)
    except KeyboardInterrupt:
        pass
    finally:
        save_teleop_data_node.destroy_node()
        rclpy.shutdown()

if __name__ == "__main__":
    main()